{
  "api/Yort.Humm.InStore.PendingAuthorisationEventArgs.html": {
    "href": "api/Yort.Humm.InStore.PendingAuthorisationEventArgs.html",
    "title": "Class PendingAuthorisationEventArgs | Yort.Humm.InStore",
    "keywords": "Class PendingAuthorisationEventArgs Arguments for the PendingAuthorisation event. Inheritance Object EventArgs PendingAuthorisationEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class PendingAuthorisationEventArgs : EventArgs Constructors | Improve this Doc View Source PendingAuthorisationEventArgs(String, Int32, Dictionary<String, String>) Initializes a new instance of the PendingAuthorisationEventArgs class. Declaration public PendingAuthorisationEventArgs(string clientReference, int retryDuration, Dictionary<string, string> trackingData) Parameters Type Name Description String clientReference The client reference of the request associated with this event. Int32 retryDuration The minimum amount of time, in seconds, to wait before re-checking the request status. Dictionary < String , String > trackingData The tracking data associated with the original request, if any (may be null). Properties | Improve this Doc View Source ClientReference Returns the client reference of the request that caused this event. Declaration public string ClientReference { get; } Property Value Type Description String The client reference of the ProcessAuthorisationRequest that is pending. | Improve this Doc View Source RetryDuration Returns the minimum number of seconds to wait until re-checking the request status. Declaration public int RetryDuration { get; } Property Value Type Description Int32 The duration of the retry interval (in seconds). | Improve this Doc View Source TrackingData Returns the tracking data associated with the original request, if any (may be null). Declaration public Dictionary<string, string> TrackingData { get; } Property Value Type Description Dictionary < String , String > The tracking data from the original ProcessAuthorisationRequest . See Also EventArgs"
  },
  "api/Yort.Humm.InStore.HummClientConfiguration.html": {
    "href": "api/Yort.Humm.InStore.HummClientConfiguration.html",
    "title": "Class HummClientConfiguration | Yort.Humm.InStore",
    "keywords": "Class HummClientConfiguration Provides information to a HummClient about how to operate and default values to use for requests. Inheritance Object HummClientConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class HummClientConfiguration Properties | Improve this Doc View Source AutoValidateRequests Gets or sets a value indicating whether or not HummClient instances automatically perform client side validation of requests before sending them. Declaration public bool AutoValidateRequests { get; set; } Property Value Type Description Boolean true to have Validate() called automatically before sending a request. false . Remarks The default and recommended value is true, ensuring the simple validation such as required fields and minimum/maximum lengths of values are checked before making a request to Humm. This property exists to disable this feature in the future should Humm change the validation rules and a new, updated version of this library not yet be available. | Improve this Doc View Source BaseApiUrl Required. Gets or sets a Uri which is the base uri of the Humm API to call. Declaration public Uri BaseApiUrl { get; set; } Property Value Type Description Uri A Uri containing the base address to use. Remarks The API address must be provided so the system knows whether to use a test or live environment, and for which country/region. Use the HummApiUrlSelector to decide on a URL if you'd rather not hard code the addreses yourself. Changing this property will have no effect on HummClient instances that have already been constructed. See Also HummApiUrlSelector | Improve this Doc View Source DeviceId Optional. Gets or sets the unique device identifier for the POS the HummClient represents. Declaration public string DeviceId { get; set; } Property Value Type Description String The device identifier. Remarks Any request sent with a null or empty device id will have this value used instead. See Also DeviceId | Improve this Doc View Source DeviceKey Optional (when registering a new device, required otherwise). Gets or sets the device key issued by Humm for creating digital signatures. Declaration public string DeviceKey { get; set; } Property Value Type Description String The device key. Remarks This value is must match the one returned by a prior CreateKeyRequest for the same MerchantId and DeviceId . If you have not yet initialised the POS device and do not have a device key, use null as the device key property here and then initialise the client instance using a CreateKeyAsync(CreateKeyRequest) call. Changing this property will have no effect on HummClient instances that have already been constructed. See Also CreateKeyAsync(CreateKeyRequest) CreateKeyRequest CreateKeyResponse | Improve this Doc View Source MerchantId Optional. Gets or sets the default merchant identifier for requests. Declaration public string MerchantId { get; set; } Property Value Type Description String The merchant identifier. Remarks Any request sent with a null or empty merchant id will have this value used instead. See Also MerchantId | Improve this Doc View Source PosVersion Optional. Gets or sets the POS version. Declaration public string PosVersion { get; set; } Property Value Type Description String The POS version. Remarks Any request sent with a null or empty POS version will have this value used instead. See Also PosVersion | Improve this Doc View Source UserAgentProductName Optional. Gets or sets the name of the 'product' to use in the user agent header on HTTP calls to Humm. Declaration public string UserAgentProductName { get; set; } Property Value Type Description String The name of the user agent product. Remarks If not supplied the Yort.Humm.InStore library name is used instead. Changing this property will have no effect on HummClient instances that have already been constructed. | Improve this Doc View Source UserAgentProductVersion Optional. Gets or sets the version of the 'product' to use in the user agent header on HTTP calls to Humm. Declaration public string UserAgentProductVersion { get; set; } Property Value Type Description String The user agent product version. Remarks If not supplied the Yort.Humm.InStore library version is used instead. Changing this property will have no effect on HummClient instances that have already been constructed."
  },
  "api/Yort.Humm.InStore.html": {
    "href": "api/Yort.Humm.InStore.html",
    "title": "Namespace Yort.Humm.InStore | Yort.Humm.InStore",
    "keywords": "Namespace Yort.Humm.InStore Classes CreateKeyRequest Represents a request to swap a device (initialisation) token for a device key used to sign future requests. CreateKeyResponse Contains details of a response to a CreateKeyRequest . HummApiUrlSelector Determines the correct base URI for calling Humm based on a country and API enviroment. HummClient The primary object used to make requests to Humm. HummClientConfiguration Provides information to a HummClient about how to operate and default values to use for requests. HummResponseSignatureException Thrown if the signature on a ResponseBase did not verify as correct. InviteRequest Represents a request to send an SMS to a mobile phone number inviting someone to sign up to Humm. InviteResponse Represents a response to a InviteRequest . PendingAuthorisationEventArgs Arguments for the PendingAuthorisation event. ProcessAuthorisationRequest Represents a request to generate a payment plan/contract for the specified amount using the provided pre-approval code generated by a customer's device. ProcessAuthorisationResponse Contains details of a response to a ProcessAuthorisationRequest . ProcessSalesAdjustmentRequest Represents a request to full or partially refund a previously successful ProcessAuthorisationAsync(ProcessAuthorisationRequest) request. ProcessSalesAdjustmentResponse Contains details of a response to a ProcessSalesAdjustmentRequest . ProcessSalesAdjustmentReversalRequest Represents a prior ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) request be reversed/undone/cancelled. ProcessSalesAdjustmentReversalResponse Contains details of a response to a ProcessSalesAdjustmentReversalRequest . PurchaseItemsCollection A collection representing a list of purchased items, used to provide extra details about a Humm transaction. RequestStates Provides a set of constants for possible Status values. SendReceiptRequest Represents a request to associate a POS receipt number with a prior authorisation request. SendReceiptResponse Contains details of a response to a ProcessAuthorisationRequest . Interfaces IHummApiUrlSelector An interface for components that can decide on the base URL to call for Humm. IHummClient An interface for the HummClient provided to allow mocking/stubbing etc. Enums HummCountry Provides a list of countries in which Humm/Oxipay API's are available. HummEnvironment Specifies which Humm API endpoints should be used."
  },
  "api/Yort.Humm.InStore.HummApiUrlSelector.html": {
    "href": "api/Yort.Humm.InStore.HummApiUrlSelector.html",
    "title": "Class HummApiUrlSelector | Yort.Humm.InStore",
    "keywords": "Class HummApiUrlSelector Determines the correct base URI for calling Humm based on a country and API enviroment. Inheritance Object HummApiUrlSelector Implements IHummApiUrlSelector Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class HummApiUrlSelector : IHummApiUrlSelector Properties | Improve this Doc View Source ApiVersion Gets or sets the version of the API to call. Declaration public decimal ApiVersion { get; set; } Property Value Type Description Decimal The API version. Remarks Currently the only supported version is 1. | Improve this Doc View Source Country Gets or sets the country the system is operating in. Declaration public HummCountry Country { get; set; } Property Value Type Description HummCountry A value from the HummCountry enum. | Improve this Doc View Source Environment Gets or sets the API environment to use. Declaration public HummEnvironment Environment { get; set; } Property Value Type Description HummEnvironment A value from the HummEnvironment specifying a test or live environment to use. Methods | Improve this Doc View Source GetUrl() Gets the base URL to use for Humm API calls. Declaration public Uri GetUrl() Returns Type Description Uri A Uri representing the base API address to be used. Exceptions Type Condition InvalidOperationException Thrown if a unknown Country , Environment or ApiVersion value is specified. See Also Environment Country ApiVersion Implements IHummApiUrlSelector"
  },
  "api/Yort.Humm.InStore.ProcessAuthorisationResponse.html": {
    "href": "api/Yort.Humm.InStore.ProcessAuthorisationResponse.html",
    "title": "Class ProcessAuthorisationResponse | Yort.Humm.InStore",
    "keywords": "Class ProcessAuthorisationResponse Contains details of a response to a ProcessAuthorisationRequest . Inheritance Object ResponseBase ProcessAuthorisationResponse Inherited Members ResponseBase.Status ResponseBase.Code ResponseBase.Message ResponseBase.TrackingData ResponseBase.Signature ResponseBase.VerifySignature(ISignatureGenerator) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class ProcessAuthorisationResponse : ResponseBase Properties | Improve this Doc View Source PurchaseNumber Gets or sets the Humm generated purchase number. Declaration [JsonProperty(\"x_purchase_number\")] public string PurchaseNumber { get; set; } Property Value Type Description String The purchase number assigned to this transaction by Humm. | Improve this Doc View Source RetryDuration Gets or sets the interval to wait before retrying the request, if the Status is Pending . Declaration [JsonProperty(\"retry_duration\")] public int RetryDuration { get; set; } Property Value Type Description Int32 The duration of the retry delay, in seconds. See Also ResponseBase ProcessAuthorisationAsync(ProcessAuthorisationRequest) ProcessAuthorisationRequest"
  },
  "api/Yort.Humm.InStore.PurchaseItemsCollection.html": {
    "href": "api/Yort.Humm.InStore.PurchaseItemsCollection.html",
    "title": "Class PurchaseItemsCollection | Yort.Humm.InStore",
    "keywords": "Class PurchaseItemsCollection A collection representing a list of purchased items, used to provide extra details about a Humm transaction. Inheritance Object List < String > PurchaseItemsCollection Implements IList < String > ICollection < String > IReadOnlyList < String > IReadOnlyCollection < String > IEnumerable < String > IList ICollection IEnumerable Inherited Members System.Collections.Generic.List<System.String>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<System.String>.System.Collections.IList.set_Item(System.Int32, System.Object) List<String>.Add(String) List<String>.AddRange(IEnumerable<String>) List<String>.AsReadOnly() List<String>.BinarySearch(String) List<String>.BinarySearch(String, IComparer<String>) List<String>.BinarySearch(Int32, Int32, String, IComparer<String>) List<String>.Clear() List<String>.Contains(String) List<String>.ConvertAll<TOutput>(Converter<String, TOutput>) List<String>.CopyTo(String[]) List<String>.CopyTo(String[], Int32) List<String>.CopyTo(Int32, String[], Int32, Int32) List<String>.Exists(Predicate<String>) List<String>.Find(Predicate<String>) List<String>.FindAll(Predicate<String>) List<String>.FindIndex(Int32, Int32, Predicate<String>) List<String>.FindIndex(Int32, Predicate<String>) List<String>.FindIndex(Predicate<String>) List<String>.FindLast(Predicate<String>) List<String>.FindLastIndex(Int32, Int32, Predicate<String>) List<String>.FindLastIndex(Int32, Predicate<String>) List<String>.FindLastIndex(Predicate<String>) List<String>.ForEach(Action<String>) List<String>.GetEnumerator() List<String>.GetRange(Int32, Int32) List<String>.IndexOf(String) List<String>.IndexOf(String, Int32) List<String>.IndexOf(String, Int32, Int32) List<String>.Insert(Int32, String) List<String>.InsertRange(Int32, IEnumerable<String>) List<String>.LastIndexOf(String) List<String>.LastIndexOf(String, Int32) List<String>.LastIndexOf(String, Int32, Int32) List<String>.Remove(String) List<String>.RemoveAll(Predicate<String>) List<String>.RemoveAt(Int32) List<String>.RemoveRange(Int32, Int32) List<String>.Reverse() List<String>.Reverse(Int32, Int32) List<String>.Sort() List<String>.Sort(IComparer<String>) List<String>.Sort(Comparison<String>) List<String>.Sort(Int32, Int32, IComparer<String>) List<String>.IEnumerable<String>.GetEnumerator() List<String>.ICollection.CopyTo(Array, Int32) List<String>.IEnumerable.GetEnumerator() List<String>.IList.Add(Object) List<String>.IList.Contains(Object) List<String>.IList.IndexOf(Object) List<String>.IList.Insert(Int32, Object) List<String>.IList.Remove(Object) List<String>.ToArray() List<String>.TrimExcess() List<String>.TrueForAll(Predicate<String>) List<String>.Capacity List<String>.Count List<String>.Item[Int32] List<String>.ICollection<String>.IsReadOnly List<String>.ICollection.IsSynchronized List<String>.ICollection.SyncRoot List<String>.IList.IsFixedSize List<String>.IList.IsReadOnly List<String>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public class PurchaseItemsCollection : List<string>, IList<string>, ICollection<string>, IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IList, ICollection, IEnumerable Remarks Each item in the collection is a string providing a simple description of the item purchased. Constructors | Improve this Doc View Source PurchaseItemsCollection() Initializes a new instance of the PurchaseItemsCollection class. Declaration public PurchaseItemsCollection() | Improve this Doc View Source PurchaseItemsCollection(IEnumerable<String>) Initializes a new instance of the PurchaseItemsCollection class. Declaration public PurchaseItemsCollection(IEnumerable<string> items) Parameters Type Name Description IEnumerable < String > items A set of items to intialise the collection with. | Improve this Doc View Source PurchaseItemsCollection(Int32) Initializes a new instance of the PurchaseItemsCollection class. Declaration public PurchaseItemsCollection(int capacity) Parameters Type Name Description Int32 capacity The number of elements that the new list can initially store. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable See Also List <T>"
  },
  "api/Yort.Humm.InStore.ProcessAuthorisationRequest.html": {
    "href": "api/Yort.Humm.InStore.ProcessAuthorisationRequest.html",
    "title": "Class ProcessAuthorisationRequest | Yort.Humm.InStore",
    "keywords": "Class ProcessAuthorisationRequest Represents a request to generate a payment plan/contract for the specified amount using the provided pre-approval code generated by a customer's device. Inheritance Object RequestBase ProcessAuthorisationRequest Inherited Members RequestBase.MerchantId RequestBase.DeviceId RequestBase.PosVersion RequestBase.OperatorId RequestBase.TrackingData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class ProcessAuthorisationRequest : RequestBase Properties | Improve this Doc View Source AutoHandlePendingResponse Gets or sets a value indicating whether the ProcessAuthorisationAsync(ProcessAuthorisationRequest) automatically handles retries pending status responses. Declaration [JsonIgnore] public bool AutoHandlePendingResponse { get; set; } Property Value Type Description Boolean True to have the HummClient instance handle pending status responses itself, or false to have the calling code handle them. Remarks A pending status will only be received if the BuyerConfirms property is true and Humm needs additional time to process the request. In that case, if AutoHandlePendingResponse is true the HummClient instance will raise the PendingAuthorisation event to advise the caller additional time is needed, then wait for the interval specified in the Humm response before retrying the request. This logic will be repeated until Humm returns a final response or an error occurs. If AutoHandlePendingResponse is false and a pending status response is received, it is up to the calling user code to take the appropriate actions. | Improve this Doc View Source BuyerConfirms Gets or sets a value indicating whether or not the 'big things' flow is supported. Declaration [JsonProperty(\"buyer_confirms\")] public bool BuyerConfirms { get; set; } Property Value Type Description Boolean True to indicate the calling system supports and wants to enable the 'big things' flow for this transaction. Remarks The 'big things' flow occurs when making purchases over a certain dollar limit, determined by Humm, which may require additional credit checks, confirmaton by the customer and so on. In this case the calling system must be prepared to handle pending responses appropriately and potentially wait longer to receive an outcome. The default value is false to indicate this is not supported, set to true to indicate it is. | Improve this Doc View Source ClientTransactionReference Required. Gets or sets the unique client transaction reference. Declaration [JsonProperty(\"x_pos_transaction_ref\")] public string ClientTransactionReference { get; set; } Property Value Type Description String The unique client transaction reference. Remarks This value should be unique and re-used on repeat calls for the same payment (in case of network/timeout errors etc) to ensure idempotency (and avoid duplicate procesing). If the value used here a temporary value not associated with the invoice/receipt/transaction document generated by the POS, a subsequent SendReceiptRequest can be made to update the created payment plan/contract with the final POS transaction reference. If the BuyerConfirms property is true then a 'big things' flow may occur which could take extra processing time. In this case one or more responses with a status of Pending may be received and require the request to be resent at a specified interval. The application code can choose to handle this itself, or set the AutoHandlePendingResponse property to true. In that case the library will automatically take care of handling the pending response, waiting the specified interval, an retrying the request until a final status is arrived at. The PendingAuthorisation can be used in this flow for logging and updating the POS UI to keep the operator informed of progress. The event is not used if AutoHandlePendingResponse is false (or a pending status response is not received). Maximum length of 64 characters. | Improve this Doc View Source FinanceAmount Required. Gets or sets the dollvar value the customer wants to pay via Humm. Declaration [JsonProperty(\"x_finance_amount\")] public decimal FinanceAmount { get; set; } Property Value Type Description Decimal The finance amount as a dollar value in decimal format. Remarks Although the Humm API requires this value to be sent as a number of cents, this library uses a dollar value and will perform the conversion to cents for you. For example, to send $119.50 set this value to 119.5. | Improve this Doc View Source PreapprovalCode Required. Gets or sets the preapproval code generated by the customer's device. Normally scanned as a barcode, or entered via keyboard if neccesary. Declaration [JsonProperty(\"x_pre_approval_code\")] public string PreapprovalCode { get; set; } Property Value Type Description String A string containing the preapproval code. Remarks Expected length is between 6 and 10 digits, but this is not validated as per the Humm documentation, in order to allow for future changes. | Improve this Doc View Source PurchaseAmount Required. Gets or sets the total purchase amount (including any value paid via Humm). Declaration [JsonProperty(\"x_purchase_amount\")] public decimal PurchaseAmount { get; set; } Property Value Type Description Decimal The full purchase amount. Remarks Although the Humm API requires this value to be sent as a number of cents, this library uses a dollar value and will perform the conversion to cents for you. For example, to send $500 set this value to 500. | Improve this Doc View Source PurchaseItems Optional (may be null). Gets or sets details about what was purchased. Declaration [JsonProperty(\"purchase_items\")] public PurchaseItemsCollection PurchaseItems { get; set; } Property Value Type Description PurchaseItemsCollection The purchase items. Remarks This detail may appear on both the seller and customer's portal when looking at the transaction, providing greater detail about the purchase in that context. See Also PurchaseItemsCollection Methods | Improve this Doc View Source Validate() Validates this request. Declaration public override void Validate() Overrides RequestBase.Validate() Remarks Ensures that ClientTransactionReference and PreapprovalCode are not null, empty string or only whitespace. Also ensure no property is larger than it's maximum allowed length (see individual property notes for details). Also ensures all base properties are valid, see Validate() . Does not validate the pre-approval code length or finance amounts, as rules for these are likely to vary over time. It is better to let the API respond with an error result than pre-validate these values. See Also RequestBase ProcessSalesAdjustmentResponse ProcessAuthorisationAsync(ProcessAuthorisationRequest)"
  },
  "api/Yort.Humm.InStore.Infrastructure.RequestBase.html": {
    "href": "api/Yort.Humm.InStore.Infrastructure.RequestBase.html",
    "title": "Class RequestBase | Yort.Humm.InStore",
    "keywords": "Class RequestBase Contains properties common to all requests. Inheritance Object RequestBase CreateKeyRequest InviteRequest ProcessAuthorisationRequest ProcessSalesAdjustmentRequest ProcessSalesAdjustmentReversalRequest SendReceiptRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore.Infrastructure Assembly : Yort.Humm.InStore.dll Syntax public abstract class RequestBase Remarks Many of these properties have an equivalent property on HummClientConfiguration . If the property on a request is null or emptry string, the value from the configuration instance passed to the HummClient will be copied into the request prior to sending the request. This minimises the number of properties that have to be explicitly set for every request. Properties | Improve this Doc View Source DeviceId Required. Gets or sets the device identifier for the POS making the request, must match the device id used when the DeviceKey in use was requested. Declaration [JsonProperty(\"x_device_id\")] public string DeviceId { get; set; } Property Value Type Description String The device identifier. Remarks Maximum length of 64 characters. | Improve this Doc View Source MerchantId Required. Gets or sets the unique merchant identifier assigned by Humm to the retailer/organisation making requests. Declaration [JsonProperty(\"x_merchant_id\")] public string MerchantId { get; set; } Property Value Type Description String The merchant identifier assigned by Humm. Remarks Maximum length of 10 characters. | Improve this Doc View Source OperatorId Gets or sets the unique identifier of the POS operator. Declaration [JsonProperty(\"x_operator_id\")] public string OperatorId { get; set; } Property Value Type Description String The operator identifier. Remarks Maximum length of 64 characters. | Improve this Doc View Source PosVersion Required. Gets or sets the POS version. Declaration [JsonProperty(\"x_firmware_version\")] public string PosVersion { get; set; } Property Value Type Description String The POS version. Remarks Maximum length of 64 characters. | Improve this Doc View Source TrackingData Optional. Gets or sets custom information to return in the response. Declaration [JsonProperty(\"tracking_data\")] public Dictionary<string, string> TrackingData { get; set; } Property Value Type Description Dictionary < String , String > A dictionary of strings containing the tracking data. Remarks Tracking data can be used by the POS to provide additional information to return with the response, which can be useful for mapping responses back to specific clients/payments or managing other state. Can be set to null (and should be if there is no tracking data). Null is the default value unless explicitly initialised to a new dictionary instance. Limit of 1000000 items. Methods | Improve this Doc View Source Validate() Validates this instance. Declaration public virtual void Validate() Remarks Ensures that MerchantId , DeviceId , PosVersion and OperatorId are not null, empty string or only whitespace. Also ensure no property is larger than it's maximum allowed length (see individual property notes for details)."
  },
  "api/Yort.Humm.InStore.SendReceiptResponse.html": {
    "href": "api/Yort.Humm.InStore.SendReceiptResponse.html",
    "title": "Class SendReceiptResponse | Yort.Humm.InStore",
    "keywords": "Class SendReceiptResponse Contains details of a response to a ProcessAuthorisationRequest . Inheritance Object ResponseBase SendReceiptResponse Inherited Members ResponseBase.Status ResponseBase.Code ResponseBase.Message ResponseBase.TrackingData ResponseBase.Signature ResponseBase.VerifySignature(ISignatureGenerator) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class SendReceiptResponse : ResponseBase See Also ResponseBase SendReceiptAsync(SendReceiptRequest) SendReceiptRequest"
  },
  "api/Yort.Humm.InStore.InviteRequest.html": {
    "href": "api/Yort.Humm.InStore.InviteRequest.html",
    "title": "Class InviteRequest | Yort.Humm.InStore",
    "keywords": "Class InviteRequest Represents a request to send an SMS to a mobile phone number inviting someone to sign up to Humm. Inheritance Object RequestBase InviteRequest Inherited Members RequestBase.MerchantId RequestBase.DeviceId RequestBase.PosVersion RequestBase.OperatorId RequestBase.TrackingData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class InviteRequest : RequestBase Properties | Improve this Doc View Source MobileNumber Required. Gets or sets the mobile number to send the invitation to. Declaration [JsonProperty(\"x_mobile\")] public string MobileNumber { get; set; } Property Value Type Description String The mobile phone number. Remarks Maximum length of 10 digits. | Improve this Doc View Source PurchaseAmount Gets or sets the amount of a initial purchase amount to generate a pre-approval code for after sign-up is complete. Declaration [JsonProperty(\"x_purchase_amount\")] public decimal PurchaseAmount { get; set; } Property Value Type Description Decimal The purchase amount as a dollar value (i.e $20 would be 20.00). Methods | Improve this Doc View Source Validate() Declaration public override void Validate() Overrides RequestBase.Validate() See Also RequestBase InviteAsync(InviteRequest) InviteResponse"
  },
  "api/Yort.Humm.InStore.SendReceiptRequest.html": {
    "href": "api/Yort.Humm.InStore.SendReceiptRequest.html",
    "title": "Class SendReceiptRequest | Yort.Humm.InStore",
    "keywords": "Class SendReceiptRequest Represents a request to associate a POS receipt number with a prior authorisation request. Inheritance Object RequestBase SendReceiptRequest Inherited Members RequestBase.MerchantId RequestBase.DeviceId RequestBase.PosVersion RequestBase.OperatorId RequestBase.TrackingData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class SendReceiptRequest : RequestBase Properties | Improve this Doc View Source ClientTransactionReference Required. Gets or sets the client transaction reference of the authorisation to update. Declaration [JsonProperty(\"x_pos_transaction_ref\")] public string ClientTransactionReference { get; set; } Property Value Type Description String This must be the same reference used in the prior ProcessAuthorisationAsync(ProcessAuthorisationRequest) request to be udpated. Remarks Maximum length of 64 characters. | Improve this Doc View Source ReceiptNumber Required. Gets or sets the receipt number. Declaration [JsonProperty(\"x_receipt_number\")] public string ReceiptNumber { get; set; } Property Value Type Description String The new receipt number to associate with the authorisation. Remarks This must be the same reference (x_pos_transaction_ref) that would get passed through on future ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) requests. Maximum length of 64 characters. Methods | Improve this Doc View Source Validate() Validates this instance. Declaration public override void Validate() Overrides RequestBase.Validate() Remarks Ensures ClientTransactionReference and ReceiptNumber are not null, empty strings or contain only whitespace. Also ensures they are not longer than allowed. Also ensures all base properties are valid, see Validate() . See Also SendReceiptAsync(SendReceiptRequest) SendReceiptResponse RequestBase"
  },
  "api/Yort.Humm.InStore.ProcessSalesAdjustmentRequest.html": {
    "href": "api/Yort.Humm.InStore.ProcessSalesAdjustmentRequest.html",
    "title": "Class ProcessSalesAdjustmentRequest | Yort.Humm.InStore",
    "keywords": "Class ProcessSalesAdjustmentRequest Represents a request to full or partially refund a previously successful ProcessAuthorisationAsync(ProcessAuthorisationRequest) request. Inheritance Object RequestBase ProcessSalesAdjustmentRequest Inherited Members RequestBase.MerchantId RequestBase.DeviceId RequestBase.PosVersion RequestBase.OperatorId RequestBase.TrackingData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class ProcessSalesAdjustmentRequest : RequestBase Properties | Improve this Doc View Source Amount Gets or sets the amount of the refund. Declaration [JsonProperty(\"x_amount\")] public decimal Amount { get; set; } Property Value Type Description Decimal The refund amount as a dollar value in decimal format. Remarks Although the Humm API requires this value to be sent as a number of cents, this library uses a dollar value and will perform the conversion to cents for you. For example, to send $119.50 set this value to 119.5. Maximum length of 64 characters. | Improve this Doc View Source ClientTransactionReference Required. Gets or sets the client transaction reference for this adjustment. Declaration [JsonProperty(\"x_pos_transaction_ref\")] public string ClientTransactionReference { get; set; } Property Value Type Description String This is the transaction reference of the sales adjustment. Remarks Be sure to read the notes on idempotency and retry logic at https://docs.shophumm.com.au/pos/api_information/retries_and_idempotency/ | Improve this Doc View Source PurchaseReference Required. Gets or sets the purchase reference of the original transaction to be refunded. Declaration [JsonProperty(\"x_purchase_ref\")] public string PurchaseReference { get; set; } Property Value Type Description String A tranaction reference for the original authorisation to be refunded. Remarks The original transaction reference. It can either be the ClientTransactionReference that was passed through as part of the ProcessAuthorisationAsync(ProcessAuthorisationRequest) request (or the SendReceiptAsync(SendReceiptRequest) request), or the humm purchase number that was returned from the call to ProcessAuthorisationAsync. In the case of the former, the ClientTransactionReference must be unique among all sellers in a chain of sellers (unique among all devices sharing a merchant id). In the case of the latter, the POS software would be required to store the PurchaseNumber retured by ProcessAuthorisationAsync(ProcessAuthorisationRequest) . Maximum length of 64 characters. Methods | Improve this Doc View Source Validate() Validates this instance. Declaration public override void Validate() Overrides RequestBase.Validate() Remarks Ensures ClientTransactionReference and PurchaseReference are not null, empty strings or contain only whitespace. Also ensures they are not longer than allowed. Also ensures all base properties are valid, see Validate() . See Also RequestBase ProcessSalesAdjustmentResponse ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest)"
  },
  "api/Yort.Humm.InStore.CreateKeyRequest.html": {
    "href": "api/Yort.Humm.InStore.CreateKeyRequest.html",
    "title": "Class CreateKeyRequest | Yort.Humm.InStore",
    "keywords": "Class CreateKeyRequest Represents a request to swap a device (initialisation) token for a device key used to sign future requests. Inheritance Object RequestBase CreateKeyRequest Inherited Members RequestBase.MerchantId RequestBase.DeviceId RequestBase.PosVersion RequestBase.OperatorId RequestBase.TrackingData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class CreateKeyRequest : RequestBase Constructors | Improve this Doc View Source CreateKeyRequest() Initializes a new instance of the CreateKeyRequest class. Declaration public CreateKeyRequest() Properties | Improve this Doc View Source AutoUpdateClientToken Gets or sets a value indicating whether the client automatically initialises itself with the returned device token (if the request is successful) so it is used on all future requests. Declaration [JsonIgnore] public bool AutoUpdateClientToken { get; set; } Property Value Type Description Boolean If true the HummClient performing this request will automatically update itself to use the returned token from a succesful request as well as returning the response to the caller so the token can be persisted for future calls. If false the the response is returned to the caller, and SetDeviceKey(String) must be manually called on whichever client instance should use the new token. Remarks Even when AutoUpdateClientToken is true, it is still up to the calling application to persist the device key returned in the response so it can be used in the event of a process/machine restart etc. | Improve this Doc View Source DeviceToken Required. Gets or sets the one-time use device token generated in the Humm Seller/merchant portal. Declaration [JsonProperty(\"x_device_token\")] public string DeviceToken { get; set; } Property Value Type Description String The device token generated in the Humm Seller/merchant portal. Remarks Maximum legth of 64 characters. | Improve this Doc View Source PosVendor Required. Gets or sets the name of the company that suppliers the POS hardware or software. Declaration [JsonProperty(\"x_pos_vendor\")] public string PosVendor { get; set; } Property Value Type Description String The company name of the POS supplier. Remarks Maximum length of 100 characters. Methods | Improve this Doc View Source Validate() Validates this instance. Declaration public override void Validate() Overrides RequestBase.Validate() Remarks Ensures DeviceToken and PosVendor are not null, empty strings or contain only whitespace. Also ensures they are not longer than allowed. Also ensures all base properties are valid, see Validate() . See Also RequestBase CreateKeyAsync(CreateKeyRequest) CreateKeyResponse"
  },
  "api/Yort.Humm.InStore.ProcessSalesAdjustmentReversalRequest.html": {
    "href": "api/Yort.Humm.InStore.ProcessSalesAdjustmentReversalRequest.html",
    "title": "Class ProcessSalesAdjustmentReversalRequest | Yort.Humm.InStore",
    "keywords": "Class ProcessSalesAdjustmentReversalRequest Represents a prior ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) request be reversed/undone/cancelled. Inheritance Object RequestBase ProcessSalesAdjustmentReversalRequest Inherited Members RequestBase.MerchantId RequestBase.DeviceId RequestBase.PosVersion RequestBase.OperatorId RequestBase.TrackingData Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class ProcessSalesAdjustmentReversalRequest : RequestBase Properties | Improve this Doc View Source AdjustmentSignature Required. Gets or sets the adjustment signature. Declaration [JsonProperty(\"x_adjustment_signature\")] public string AdjustmentSignature { get; set; } Property Value Type Description String The adjustment signature. Remarks The original adjustment signature that we are trying to reverse. We are using the Sales Adjustment Signature as we can not rely on the Sales Adjustment to return a result. (e.g.Network Issues). See the Humm documentation at https://docs.shophumm.com.au/pos/api/process_adjustment_reversal/ Maximum length of 200 characters. | Improve this Doc View Source ClientTransactionReference Required. Gets or sets the client transaction reference for this reversal. Declaration [JsonProperty(\"x_pos_transaction_ref\")] public string ClientTransactionReference { get; set; } Property Value Type Description String This is the transaction reference of the sales adjustment reversal. Remarks Maximum length of 64 characters. Methods | Improve this Doc View Source Validate() Validates this instance. Declaration public override void Validate() Overrides RequestBase.Validate() Remarks Ensures ClientTransactionReference and AdjustmentSignature are not null, empty strings or contain only whitespace. Also ensures they are not longer than allowed. Also ensures all base properties are valid, see Validate() . See Also RequestBase ProcessSalesAdjustmentReversalRequest ProcessSalesAdjustmentReversalAsync(ProcessSalesAdjustmentReversalRequest)"
  },
  "api/Yort.Humm.InStore.Infrastructure.html": {
    "href": "api/Yort.Humm.InStore.Infrastructure.html",
    "title": "Namespace Yort.Humm.InStore.Infrastructure | Yort.Humm.InStore",
    "keywords": "Namespace Yort.Humm.InStore.Infrastructure Classes Hmac256SignatureGenerator Used to generate signatures using the HMACSHA256 hash algorithm, currently the default and only supported algorithm by Humm. RequestBase Contains properties common to all requests. ResponseBase Provides properties common to all Humm responses. SignedRequestWriter Used to write a Humm request as json including the relevant signature in the output. Interfaces ISignatureGenerator A generic interface for components that can calculate a digital signature for values from a Humm request or response."
  },
  "api/Yort.Humm.InStore.HummClient.html": {
    "href": "api/Yort.Humm.InStore.HummClient.html",
    "title": "Class HummClient | Yort.Humm.InStore",
    "keywords": "Class HummClient The primary object used to make requests to Humm. Inheritance Object HummClient Implements IHummClient IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class HummClient : IHummClient, IDisposable Remarks Each instance of this class represents a single POS device, if being used from a centralised service or a web server then you will need to create an instance for each device, either per-request or pooled as neccesary. Details about the device the instance represents are provided via the HummClientConfiguration instance passed into the constructor. Note that financial/dollar values should be expressed as Decimal in their dollar & cents format, i.e $20.50 should be set as 20.50 on a request object, the library will take care of converting this to a cents value for Humm. This object makes requests via the REST interface, SOAP is not currently supported by this library. See the Humm API documentation at; https://docs.shophumm.com.au/pos/getting-started/ Constructors | Improve this Doc View Source HummClient(HummClientConfiguration) Constructs a new instance using the specified configuration. Declaration public HummClient(HummClientConfiguration config) Parameters Type Name Description HummClientConfiguration config A HummClientConfiguration specifying details of how this instance is configured. Exceptions Type Condition ArgumentNullException Thrown if config is null, or BaseApiUrl is null. Methods | Improve this Doc View Source CreateKeyAsync(CreateKeyRequest) Requests a new device key from Humm using the (initialisation) device token created in the Humm Seller (merchant) portal. Declaration public Task<CreateKeyResponse> CreateKeyAsync(CreateKeyRequest request) Parameters Type Name Description CreateKeyRequest request A CreateKeyRequest instance containing details of the request to make. Returns Type Description Task < CreateKeyResponse > A CreateKeyResponse instance containing the Humm response. See the Humm documentation at https://docs.shophumm.com.au/pos/api/create_key/ Remarks If the AutoUpdateClientToken argument is true and the request is successsful, the client will automatically call SetDeviceKey(String) with the value of Key for you, ensuring all future calls made with this client instance use the new token. Exceptions Type Condition ArgumentNullException Thrown if request , DeviceToken or PosVendor is null. ArgumentException Thrown if DeviceToken or PosVendor is an empty string or contain only whitespace characters. ObjectDisposedException Thrown if this instance has been disposed. HummResponseSignatureException Thrown if the response signature cannot be validated. HttpRequestException Thrown if an HTTP protocol level or HttpClient pipeline error occurs. See Also CreateKeyRequest CreateKeyResponse SetDeviceKey(String) | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Remarks Once disposed, calls to most methods on this object with throw ObjectDisposedException . This method is safe to call multiple times in series. It is not guarateed to call in parallel, though no known issues exist. | Improve this Doc View Source InviteAsync(InviteRequest) Sends an SMS to the customer's mobile phone inviting them to sign-up as a Humm customer. Declaration public Task<InviteResponse> InviteAsync(InviteRequest request) Parameters Type Name Description InviteRequest request A InviteRequest instance. Returns Type Description Task < InviteResponse > A InviteResponse . Exceptions Type Condition ArgumentNullException Thrown if request is null. HummResponseSignatureException Thrown if the response signature cannot be validated. ObjectDisposedException Thrown if this instance has been disposed. InvalidOperationException Thrown if this instance has not been initialised with a non-null device key ( SetDeviceKey(String) and DeviceKey ).. HttpRequestException Thrown if an HTTP protocol level or HttpClient pipeline error occurs. See Also InviteRequest InviteResponse | Improve this Doc View Source ProcessAuthorisationAsync(ProcessAuthorisationRequest) Requests an authorisation (for payment) be processed. Declaration public Task<ProcessAuthorisationResponse> ProcessAuthorisationAsync(ProcessAuthorisationRequest request) Parameters Type Name Description ProcessAuthorisationRequest request A ProcessAuthorisationRequest instance. Returns Type Description Task < ProcessAuthorisationResponse > A ProcessAuthorisationResponse instance. Remarks This method is used to request a payment contract be setup for a specified amount using an approval code generated by the customer's device. It is the most common API call made to Humm in a 'happy path'. If the AutoHandlePendingResponse value is true and the response indicates a Pending status then this call will raise the PendingAuthorisation event, wait for the specified retry interval, and the re-make the request again. This will be repeated until a non-pending status is returned, or an error is thrown from one of the handlers for the PendingAuthorisation event. In this case the response returned to the caller will be the final status (success/failure/error). If AutoHandlePendingResponse is false then the first response will be returned to the caller and if the status is Pending it is up to the caller to repeat the request until a final state is reached. See the Humm documentation at https://docs.shophumm.com.au/pos/api/process_authorisation/ and https://docs.shophumm.com.au/pos/api_information/retries_and_idempotency/ Exceptions Type Condition ArgumentNullException Thrown if request is null. HummResponseSignatureException Thrown if the response signature cannot be validated. ObjectDisposedException Thrown if this instance has been disposed. InvalidOperationException Thrown if this instance has not been initialised with a non-null device key ( SetDeviceKey(String) and DeviceKey ).. HttpRequestException Thrown if an HTTP protocol level or HttpClient pipeline error occurs. See Also PendingAuthorisation ProcessAuthorisationRequest ProcessAuthorisationResponse | Improve this Doc View Source ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) A sales adjustment is used to refund money in the case of an item that is returned or fails to ship etc. Declaration public Task<ProcessSalesAdjustmentResponse> ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest request) Parameters Type Name Description ProcessSalesAdjustmentRequest request A ProcessSalesAdjustmentRequest instance. Returns Type Description Task < ProcessSalesAdjustmentResponse > A ProcessSalesAdjustmentResponse instance. Remarks A sales adjustment can be used for full or partial refund of previously approved ProcessAuthorisationAsync(ProcessAuthorisationRequest) . See the Humm documentation at https://docs.shophumm.com.au/pos/api/process_sales_adjustment/ and https://docs.shophumm.com.au/pos/api_information/retries_and_idempotency/ Exceptions Type Condition ArgumentNullException Thrown if request is null. HummResponseSignatureException Thrown if the response signature cannot be validated. ObjectDisposedException Thrown if this instance has been disposed. InvalidOperationException Thrown if this instance has not been initialised with a non-null device key ( SetDeviceKey(String) and DeviceKey ).. HttpRequestException Thrown if an HTTP protocol level or HttpClient pipeline error occurs. See Also ProcessAuthorisationAsync(ProcessAuthorisationRequest) ProcessSalesAdjustmentReversalAsync(ProcessSalesAdjustmentReversalRequest) | Improve this Doc View Source ProcessSalesAdjustmentReversalAsync(ProcessSalesAdjustmentReversalRequest) This endpoint is used to process a reversal of a ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) at the point-of-sale Declaration public Task<ProcessSalesAdjustmentReversalResponse> ProcessSalesAdjustmentReversalAsync(ProcessSalesAdjustmentReversalRequest request) Parameters Type Name Description ProcessSalesAdjustmentReversalRequest request A ProcessSalesAdjustmentReversalRequest instance. Returns Type Description Task < ProcessSalesAdjustmentReversalResponse > A ProcessSalesAdjustmentReversalResponse instance. Remarks This is typically used to undo a refund in the case where it was made in error, or where the outcome was unknown (due to a network timeout/error) and an idempotent retry is not desirable. See the Humm documentation at; https://docs.shophumm.com.au/pos/api_information/retries_and_idempotency/ Exceptions Type Condition ArgumentNullException Thrown if request is null. HummResponseSignatureException Thrown if the response signature cannot be validated. ObjectDisposedException Thrown if this instance has been disposed. InvalidOperationException Thrown if this instance has not been initialised with a non-null device key ( SetDeviceKey(String) and DeviceKey ).. HttpRequestException Thrown if an HTTP protocol level or HttpClient pipeline error occurs. See Also ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) | Improve this Doc View Source SendReceiptAsync(SendReceiptRequest) Registers a POS transaction number against a prior authorisation. Declaration public Task<SendReceiptResponse> SendReceiptAsync(SendReceiptRequest request) Parameters Type Name Description SendReceiptRequest request A SendReceiptRequest instance. Returns Type Description Task < SendReceiptResponse > A SendReceiptResponse instance containing the result of the request. Remarks This method is only used if the ClientTransactionReference was a temporary value and not a POS transaction number. In this case, when the POS finally assigns a permanent transaction number this method can be called to update the payment with the relevant reference. See the Humm documentation at https://docs.shophumm.com.au/pos/api/send_receipt/ and https://docs.shophumm.com.au/pos/api_information/retries_and_idempotency/ Exceptions Type Condition ArgumentNullException Thrown if request is null. HummResponseSignatureException Thrown if the response signature cannot be validated. ObjectDisposedException Thrown if this instance has been disposed. InvalidOperationException Thrown if this instance has not been initialised with a non-null device key ( SetDeviceKey(String) and DeviceKey ).. HttpRequestException Thrown if an HTTP protocol level or HttpClient pipeline error occurs. See Also ProcessAuthorisationAsync(ProcessAuthorisationRequest) | Improve this Doc View Source SetDeviceKey(String) Sets the device key used for generating digital signatures. Declaration public void SetDeviceKey(string deviceKey) Parameters Type Name Description String deviceKey A string containing the device key previously returns by a CreateKeyAsync(CreateKeyRequest) request. Remarks The device key is usually provided via the HummClientConfiguration constructor argument if known before client is created. This method is typically used when registering a new device via CreateKeyAsync(CreateKeyRequest) and not electing to have the token automatically applied. Null can be provided to clear the currently assigned device key (if any), prior to calling CreateKeyAsync(CreateKeyRequest) to generate a new device key. See Also CreateKeyAsync(CreateKeyRequest) HummClientConfiguration Events | Improve this Doc View Source PendingAuthorisation Raised when a ProcessAuthorisationResponse is received with a status of Pending and the AutoHandlePendingResponse property of the request was true. Declaration public event EventHandler<PendingAuthorisationEventArgs> PendingAuthorisation Event Type Type Description EventHandler < PendingAuthorisationEventArgs > Remarks While the AutoHandlePendingResponse option frees the client from having to handle the repeat API call logic to Humm in the case of a pending 'big things' purchase flow, this event can be used by the client to update it's UI to indicate the pending status and/or when the next recheck will occur if it desires. Implements IHummClient System.IDisposable See Also HummClientConfiguration IDisposable"
  },
  "api/Yort.Humm.InStore.IHummClient.html": {
    "href": "api/Yort.Humm.InStore.IHummClient.html",
    "title": "Interface IHummClient | Yort.Humm.InStore",
    "keywords": "Interface IHummClient An interface for the HummClient provided to allow mocking/stubbing etc. Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public interface IHummClient Methods | Improve this Doc View Source CreateKeyAsync(CreateKeyRequest) Requests a new device key from Humm using the (initialisation) device token created in the Humm Seller (merchant) portal. Declaration Task<CreateKeyResponse> CreateKeyAsync(CreateKeyRequest request) Parameters Type Name Description CreateKeyRequest request A CreateKeyRequest instance containing details of the request to make. Returns Type Description Task < CreateKeyResponse > A CreateKeyResponse instance containing the Humm response. Remarks If the AutoUpdateClientToken argument is true and the request is successsful, the client will automatically call SetDeviceKey(String) with the value of Key for you, ensuring all future calls made with this client instance use the new token. Exceptions Type Condition ArgumentNullException Thrown if request is null. See Also CreateKeyRequest CreateKeyResponse SetDeviceKey(String) | Improve this Doc View Source InviteAsync(InviteRequest) Sends an SMS to the customer's mobile phone inviting them to sign-up as a Humm customer. Declaration Task<InviteResponse> InviteAsync(InviteRequest request) Parameters Type Name Description InviteRequest request A InviteRequest instance. Returns Type Description Task < InviteResponse > A InviteResponse . Exceptions Type Condition ArgumentNullException Thrown if request is null. HummResponseSignatureException Thrown if the response signature cannot be validated. ObjectDisposedException Thrown if this instance has been disposed. InvalidOperationException Thrown if this instance has not been initialised with a non-null device key ( SetDeviceKey(String) and DeviceKey ).. See Also InviteRequest InviteResponse | Improve this Doc View Source ProcessAuthorisationAsync(ProcessAuthorisationRequest) Requests an authorisation (for payment) be processed. Declaration Task<ProcessAuthorisationResponse> ProcessAuthorisationAsync(ProcessAuthorisationRequest request) Parameters Type Name Description ProcessAuthorisationRequest request A ProcessAuthorisationRequest instance. Returns Type Description Task < ProcessAuthorisationResponse > A ProcessAuthorisationResponse instance. Remarks This method is used to request a payment contract be setup for a specified amount using an approval code generated by the customer's device. It is the most common API call made to Humm in a 'happy path'. If the AutoHandlePendingResponse value is true and the response indicates a Pending status then this call will raise the PendingAuthorisation event, wait for the specified retry interval, and the re-make the request again. This will be repeated until a non-pending status is returned, or an error is thrown from one of the handlers for the PendingAuthorisation event. In this case the response returned to the caller will be the final status (success/failure/error). If AutoHandlePendingResponse is false then the first response will be returned to the caller and if the status is Pending it is up to the caller to repeat the request until a final state is reached. Exceptions Type Condition ArgumentNullException Thrown if request is null. HummResponseSignatureException Thrown if the response signature cannot be validated. ObjectDisposedException Thrown if this instance has been disposed. InvalidOperationException Thrown if this instance has not been initialised with a non-null device key ( SetDeviceKey(String) and DeviceKey ).. See Also PendingAuthorisation ProcessAuthorisationRequest ProcessAuthorisationResponse | Improve this Doc View Source ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) A sales adjustment is used to refund money in the case of an item that is returned or fails to ship etc. Declaration Task<ProcessSalesAdjustmentResponse> ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest request) Parameters Type Name Description ProcessSalesAdjustmentRequest request A ProcessSalesAdjustmentRequest instance. Returns Type Description Task < ProcessSalesAdjustmentResponse > A ProcessSalesAdjustmentResponse instance. Remarks A sales adjustment can be used for full or partial refund of previously approved ProcessAuthorisationAsync(ProcessAuthorisationRequest) . See the Humm documentation at https://docs.shophumm.com.au/pos/api/process_sales_adjustment/ and https://docs.shophumm.com.au/pos/api_information/retries_and_idempotency/ | Improve this Doc View Source ProcessSalesAdjustmentReversalAsync(ProcessSalesAdjustmentReversalRequest) This endpoint is used to process a reversal of a ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) at the point-of-sale Declaration Task<ProcessSalesAdjustmentReversalResponse> ProcessSalesAdjustmentReversalAsync(ProcessSalesAdjustmentReversalRequest request) Parameters Type Name Description ProcessSalesAdjustmentReversalRequest request A ProcessSalesAdjustmentReversalRequest instance. Returns Type Description Task < ProcessSalesAdjustmentReversalResponse > A ProcessSalesAdjustmentReversalResponse instance. Remarks This is typically used to undo a refund in the case where it was made in error, or where the outcome was unknown (due to a network timeout/error) and an idempotent retry is not desirable. See the Humm documentation at; https://docs.shophumm.com.au/pos/api_information/retries_and_idempotency/ | Improve this Doc View Source SendReceiptAsync(SendReceiptRequest) Registers a POS transaction number against a prior authorisation. Declaration Task<SendReceiptResponse> SendReceiptAsync(SendReceiptRequest request) Parameters Type Name Description SendReceiptRequest request A SendReceiptRequest instance. Returns Type Description Task < SendReceiptResponse > A SendReceiptResponse instance containing the result of the request. Remarks This method is only used if the ClientTransactionReference was a temporary value and not a POS transaction number. In this case, when the POS finally assigns a permanent transaction number this method can be called to update the payment with the relevant reference. See the Humm documentation at https://docs.shophumm.com.au/pos/api/send_receipt/ and https://docs.shophumm.com.au/pos/api_information/retries_and_idempotency/ | Improve this Doc View Source SetDeviceKey(String) Sets the device key used for generating digital signatures. Declaration void SetDeviceKey(string deviceKey) Parameters Type Name Description String deviceKey A string containing the device key previously returns by a CreateKeyAsync(CreateKeyRequest) request. Remarks The device key is usually provided via the HummClientConfiguration constructor argument if known before client is created. This method is typically used when registering a new device via CreateKeyAsync(CreateKeyRequest) and not electing to have the token automatically applied. Null can be provided to clear the currently assigned device key (if any), prior to calling CreateKeyAsync(CreateKeyRequest) to generate a new device key. See Also CreateKeyAsync(CreateKeyRequest) HummClientConfiguration Events | Improve this Doc View Source PendingAuthorisation Raised when a ProcessAuthorisationResponse is received with a status of Pending and the AutoHandlePendingResponse property of the request was true. Declaration event EventHandler<PendingAuthorisationEventArgs> PendingAuthorisation Event Type Type Description EventHandler < PendingAuthorisationEventArgs > Remarks While the AutoHandlePendingResponse option frees the client from having to handle the repeat API call logic to Humm in the case of a pending 'big things' purchase flow, this event can be used by the client to update it's UI to indicate the pending status and/or when the next recheck will occur if it desires. See Also HummClient"
  },
  "api/Yort.Humm.InStore.Infrastructure.Hmac256SignatureGenerator.html": {
    "href": "api/Yort.Humm.InStore.Infrastructure.Hmac256SignatureGenerator.html",
    "title": "Class Hmac256SignatureGenerator | Yort.Humm.InStore",
    "keywords": "Class Hmac256SignatureGenerator Used to generate signatures using the HMACSHA256 hash algorithm, currently the default and only supported algorithm by Humm. Inheritance Object Hmac256SignatureGenerator Implements ISignatureGenerator IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore.Infrastructure Assembly : Yort.Humm.InStore.dll Syntax public sealed class Hmac256SignatureGenerator : ISignatureGenerator, IDisposable Constructors | Improve this Doc View Source Hmac256SignatureGenerator(String) Initializes a new instance of the Hmac256SignatureGenerator class. Declaration public Hmac256SignatureGenerator([ValidatedNotNull] string apiKey) Parameters Type Name Description String apiKey The secret key to use when generating the signature. This should be a Humm Device Key ( DeviceKey ). Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source GenerateSignature(IEnumerable<KeyValuePair<String, Object>>) Generates the signature and returns it as a string. Declaration public string GenerateSignature(IEnumerable<KeyValuePair<string, object>> properties) Parameters Type Name Description IEnumerable < KeyValuePair < String , Object >> properties A dictionary of values to be considered for use in the signature generation. See remarks for more details. Returns Type Description String A string containing the signature calculated from the properties provided. Remarks Humm signatures are currently case-insensitive hexadecimal strings. Only values from the properties argument where the key starts with \"x_\" will be used, so the caller may pass the full property set if desired. Values of type decimal are treated as dollar values and will be automatically multiplied by 100, so should be passed as their decimal dollar representation. Values that are null will be ignored (treated as a missing/undeclared property and excluded from the signature generation). Exceptions Type Condition ObjectDisposedException Hmac256SignatureGenerator ArgumentNullException Thrown if properties is null. Implements ISignatureGenerator System.IDisposable See Also ISignatureGenerator"
  },
  "api/Yort.Humm.InStore.InviteResponse.html": {
    "href": "api/Yort.Humm.InStore.InviteResponse.html",
    "title": "Class InviteResponse | Yort.Humm.InStore",
    "keywords": "Class InviteResponse Represents a response to a InviteRequest . Inheritance Object ResponseBase InviteResponse Inherited Members ResponseBase.Status ResponseBase.Code ResponseBase.Message ResponseBase.TrackingData ResponseBase.Signature ResponseBase.VerifySignature(ISignatureGenerator) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class InviteResponse : ResponseBase See Also ResponseBase InviteAsync(InviteRequest) InviteRequest"
  },
  "api/Yort.Humm.InStore.HummCountry.html": {
    "href": "api/Yort.Humm.InStore.HummCountry.html",
    "title": "Enum HummCountry | Yort.Humm.InStore",
    "keywords": "Enum HummCountry Provides a list of countries in which Humm/Oxipay API's are available. Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public enum HummCountry Remarks You must call the API for the country your Humm merchant was registered in (NZ merchants must use NZ endpoints, AU merchants must use AU endpoints etc). Fields Name Description Australia The Australian API's. NewZealand The New Zealand API's."
  },
  "api/Yort.Humm.InStore.HummEnvironment.html": {
    "href": "api/Yort.Humm.InStore.HummEnvironment.html",
    "title": "Enum HummEnvironment | Yort.Humm.InStore",
    "keywords": "Enum HummEnvironment Specifies which Humm API endpoints should be used. Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public enum HummEnvironment Fields Name Description Dummy Default. The dummy API environment is suitable for automated testing, with fixed responses sent based on specific request inputs. Production The production API environment is the live API used for conducting real financial transactions. Sandbox The sandbox API environment is suitable for manual testing, user-acceptance testing and demo systems where real financial transactions are not desired but human interactive and realistic worflows are."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Yort.Humm.InStore",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Yort.Humm.InStore",
    "keywords": "Home Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "api/Yort.Humm.InStore.Infrastructure.ISignatureGenerator.html": {
    "href": "api/Yort.Humm.InStore.Infrastructure.ISignatureGenerator.html",
    "title": "Interface ISignatureGenerator | Yort.Humm.InStore",
    "keywords": "Interface ISignatureGenerator A generic interface for components that can calculate a digital signature for values from a Humm request or response. Inherited Members IDisposable.Dispose() Namespace : Yort.Humm.InStore.Infrastructure Assembly : Yort.Humm.InStore.dll Syntax public interface ISignatureGenerator : IDisposable Methods | Improve this Doc View Source GenerateSignature(IEnumerable<KeyValuePair<String, Object>>) Generates the signature and returns it as a string. Declaration string GenerateSignature(IEnumerable<KeyValuePair<string, object>> properties) Parameters Type Name Description IEnumerable < KeyValuePair < String , Object >> properties A dictionary of values to be considered for use in the signature generation. See remarks for more details. Returns Type Description String A string containing the signature calculated from the properties provided. Remarks Humm signatures are currently case-insensitive hexadecimal strings. Only values from the properties argument where the key starts with \"x_\" will be used, so the caller may pass the full property set if desired. Values of type decimal are treated as dollar values and will be automatically multiplied by 100, so should be passed as their decimal dollar representation. Values that are null will be ignored (treated as a missing/undeclared property and excluded from the signature generation). Exceptions Type Condition ArgumentNullException Thrown if properties is null. See Also IDisposable"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | Yort.Humm.InStore",
    "keywords": "Add your introductions here!"
  },
  "api/Yort.Humm.InStore.ProcessSalesAdjustmentReversalResponse.html": {
    "href": "api/Yort.Humm.InStore.ProcessSalesAdjustmentReversalResponse.html",
    "title": "Class ProcessSalesAdjustmentReversalResponse | Yort.Humm.InStore",
    "keywords": "Class ProcessSalesAdjustmentReversalResponse Contains details of a response to a ProcessSalesAdjustmentReversalRequest . Inheritance Object ResponseBase ProcessSalesAdjustmentReversalResponse Inherited Members ResponseBase.Status ResponseBase.Code ResponseBase.Message ResponseBase.TrackingData ResponseBase.Signature ResponseBase.VerifySignature(ISignatureGenerator) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class ProcessSalesAdjustmentReversalResponse : ResponseBase See Also ResponseBase ProcessSalesAdjustmentReversalAsync(ProcessSalesAdjustmentReversalRequest) ProcessSalesAdjustmentReversalRequest"
  },
  "api/Yort.Humm.InStore.RequestStates.html": {
    "href": "api/Yort.Humm.InStore.RequestStates.html",
    "title": "Class RequestStates | Yort.Humm.InStore",
    "keywords": "Class RequestStates Provides a set of constants for possible Status values. Inheritance Object RequestStates Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public static class RequestStates Remarks See the Humm documentation at . The most common statuses are: Success When the intent of the request is successful e.g. an Approval from the ProcessAuthorisation API. Failed When the intent of the request is unsuccessful e.g. a Decline from the ProcessAuthorisation API. Error When there is a problem with the request or an unexpected error. Fields | Improve this Doc View Source Cancelled The request was cancelled. Declaration public const string Cancelled = \"Cancelled\" Field Value Type Description String | Improve this Doc View Source Failed The request failed or was declined. Declaration public const string Failed = \"Failed\" Field Value Type Description String | Improve this Doc View Source Pending The request is pending and needs more time to be processed. Wait for the specified interval and retry the request. Declaration public const string Pending = \"Pending\" Field Value Type Description String | Improve this Doc View Source Success The request was succesfully processed and approved. Declaration public const string Success = \"Success\" Field Value Type Description String"
  },
  "api/Yort.Humm.InStore.IHummApiUrlSelector.html": {
    "href": "api/Yort.Humm.InStore.IHummApiUrlSelector.html",
    "title": "Interface IHummApiUrlSelector | Yort.Humm.InStore",
    "keywords": "Interface IHummApiUrlSelector An interface for components that can decide on the base URL to call for Humm. Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public interface IHummApiUrlSelector Remarks The default implementation is IHummApiUrlSelector and is likely all user code needs. However this interface allows custom versions to be built, such as one that allows user code to explicitly specify a raw URL or to read config settings from persistent storage which are used to make a choice of base address. Methods | Improve this Doc View Source GetUrl() Gets the base URL to use for Humm API calls. Declaration Uri GetUrl() Returns Type Description Uri A Uri representing the base API address to be used."
  },
  "api/Yort.Humm.InStore.Infrastructure.ResponseBase.html": {
    "href": "api/Yort.Humm.InStore.Infrastructure.ResponseBase.html",
    "title": "Class ResponseBase | Yort.Humm.InStore",
    "keywords": "Class ResponseBase Provides properties common to all Humm responses. Inheritance Object ResponseBase CreateKeyResponse InviteResponse ProcessAuthorisationResponse ProcessSalesAdjustmentResponse ProcessSalesAdjustmentReversalResponse SendReceiptResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore.Infrastructure Assembly : Yort.Humm.InStore.dll Syntax public abstract class ResponseBase Properties | Improve this Doc View Source Code A code providing more details about the Status , suitable for using user code to take programmtic action on or log as a language neutral description of the outcome. Declaration [JsonProperty(\"x_code\")] public string Code { get; set; } Property Value Type Description String The code returned by Humm. Remarks See for a list of codes returned by Humm. See Also Status Message | Improve this Doc View Source Message Gets or sets a human readable message providing more details about the Status . Declaration [JsonProperty(\"x_message\")] public string Message { get; set; } Property Value Type Description String The message. | Improve this Doc View Source Signature Gets or sets the signature of this response, used to verify the response is authentic. Declaration [JsonProperty(\"signature\")] public string Signature { get; set; } Property Value Type Description String The signature as a string. See Also VerifySignature(ISignatureGenerator) | Improve this Doc View Source Status Gets or sets the status of the request, used to determine if the request was successful, declined, cancelled or resulted in an error. Declaration [JsonProperty(\"x_status\")] public string Status { get; set; } Property Value Type Description String A string containig the status of the request. See Also RequestStates Code Message | Improve this Doc View Source TrackingData Gets the tracking data that was sent with the request that generated this response. Declaration [JsonProperty(\"tracking_data\")] public Dictionary<string, string> TrackingData { get; } Property Value Type Description Dictionary < String , String > A dictionary of strings containing the tracking data. See Also TrackingData Methods | Improve this Doc View Source VerifySignature(ISignatureGenerator) Verifies the signature of this response matches the expected signature using the ISignatureGenerator provided. Declaration public void VerifySignature(ISignatureGenerator signatureGenerator) Parameters Type Name Description ISignatureGenerator signatureGenerator The signature generator to use to confirm the response signature. Remarks The HummClient automatically calls this method when a reponse is received, application code does not need to call this method explicitly unless performing it's own calls without using a HummClient instance. The signatureGenerator must have been created/initialised with the same device key as the request that generated this response. If the Signature property is null or empty, this call is a no-op and will return without throwing an exception. Exceptions Type Condition ArgumentNullException Thrown if signatureGenerator is null. HummResponseSignatureException Thrown if the signature of the response does not match the expected signature."
  },
  "api/Yort.Humm.InStore.ProcessSalesAdjustmentResponse.html": {
    "href": "api/Yort.Humm.InStore.ProcessSalesAdjustmentResponse.html",
    "title": "Class ProcessSalesAdjustmentResponse | Yort.Humm.InStore",
    "keywords": "Class ProcessSalesAdjustmentResponse Contains details of a response to a ProcessSalesAdjustmentRequest . Inheritance Object ResponseBase ProcessSalesAdjustmentResponse Inherited Members ResponseBase.Status ResponseBase.Code ResponseBase.Message ResponseBase.TrackingData ResponseBase.Signature ResponseBase.VerifySignature(ISignatureGenerator) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class ProcessSalesAdjustmentResponse : ResponseBase See Also ResponseBase ProcessSalesAdjustmentAsync(ProcessSalesAdjustmentRequest) ProcessSalesAdjustmentRequest"
  },
  "api/Yort.Humm.InStore.HummResponseSignatureException.html": {
    "href": "api/Yort.Humm.InStore.HummResponseSignatureException.html",
    "title": "Class HummResponseSignatureException | Yort.Humm.InStore",
    "keywords": "Class HummResponseSignatureException Thrown if the signature on a ResponseBase did not verify as correct. Inheritance Object Exception HummResponseSignatureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax [Serializable] public class HummResponseSignatureException : Exception, ISerializable Constructors | Improve this Doc View Source HummResponseSignatureException() Initializes a new instance of the HummResponseSignatureException class. Declaration public HummResponseSignatureException() | Improve this Doc View Source HummResponseSignatureException(SerializationInfo, StreamingContext) Initializes a new instance of the HummResponseSignatureException class. Declaration protected HummResponseSignatureException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source HummResponseSignatureException(String) Initializes a new instance of the HummResponseSignatureException class. Declaration public HummResponseSignatureException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source HummResponseSignatureException(String, Exception) Initializes a new instance of the HummResponseSignatureException class. Declaration public HummResponseSignatureException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Implements System.Runtime.Serialization.ISerializable See Also Exception"
  },
  "api/Yort.Humm.InStore.CreateKeyResponse.html": {
    "href": "api/Yort.Humm.InStore.CreateKeyResponse.html",
    "title": "Class CreateKeyResponse | Yort.Humm.InStore",
    "keywords": "Class CreateKeyResponse Contains details of a response to a CreateKeyRequest . Inheritance Object ResponseBase CreateKeyResponse Inherited Members ResponseBase.Status ResponseBase.Code ResponseBase.Message ResponseBase.TrackingData ResponseBase.Signature ResponseBase.VerifySignature(ISignatureGenerator) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore Assembly : Yort.Humm.InStore.dll Syntax public sealed class CreateKeyResponse : ResponseBase Properties | Improve this Doc View Source Key The device key to use for all future API requests using the merchant id and device id associated with the request that generated this response. Declaration [JsonProperty(\"x_key\")] public string Key { get; set; } Property Value Type Description String The key as a string. Remarks This key is required to generate signatures for all future requests to the Humm API that use the same merchant id and device id as the request that generated this response. User code should ensure this value is persisted to disk and re-loaded as required, and ensure any relevant HummClient instance is initialised with this key. See Also ResponseBase CreateKeyAsync(CreateKeyRequest) CreateKeyRequest"
  },
  "api/Yort.Humm.InStore.Infrastructure.SignedRequestWriter.html": {
    "href": "api/Yort.Humm.InStore.Infrastructure.SignedRequestWriter.html",
    "title": "Class SignedRequestWriter | Yort.Humm.InStore",
    "keywords": "Class SignedRequestWriter Used to write a Humm request as json including the relevant signature in the output. Inheritance Object SignedRequestWriter Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Humm.InStore.Infrastructure Assembly : Yort.Humm.InStore.dll Syntax public sealed class SignedRequestWriter : IDisposable Constructors | Improve this Doc View Source SignedRequestWriter(ISignatureGenerator) Initializes a new instance of the SignedRequestWriter class. Declaration public SignedRequestWriter(ISignatureGenerator signatureGenerator) Parameters Type Name Description ISignatureGenerator signatureGenerator The signature generator. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Remarks Will dispose the ISignatureGenerator passed into the constructor when this instance was created. | Improve this Doc View Source WriteRequest<T>(T) Writes the specified request as to a string and returns the result. Declaration public string WriteRequest<T>(T request) where T : class Parameters Type Name Description T request The request to write. Returns Type Description String A string containing the request written as json and containing the required digital signature. Type Parameters Name Description T The type of request to be written, must be a .Net reference type. Exceptions Type Condition ObjectDisposedException Thrown if this instance is disposed. ArgumentNullException Thrown if request is null. See Also WriteRequest<T>(T, Stream) Dispose() | Improve this Doc View Source WriteRequest<T>(T, Stream) Writes the specified request to the specified stream. Declaration public void WriteRequest<T>(T request, [ValidatedNotNull] Stream outputStream) where T : class Parameters Type Name Description T request The request to write. Stream outputStream The stream to write to. Type Parameters Name Description T The type of request to be written, must be a .Net reference type. Exceptions Type Condition ObjectDisposedException Thrown if this instance is disposed. ArgumentNullException Thrown if request or outputStream is null. See Also WriteRequest<T>(T) Dispose() Implements System.IDisposable See Also IDisposable"
  }
}