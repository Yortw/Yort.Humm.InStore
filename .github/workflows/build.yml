name: Yort.Humm.Instore.Build

on: 
  push:
    branches: master
    tags: '**'
  pull_request:

jobs:
  build:

    runs-on: windows-latest
    env:
      Humm_Test_Sandbox_DeviceKey: ${{ secrets.Test_Sandbox_DeviceKey }}    
      Humm_Test_Sandbox_MerchantId: ${{ secrets.Test_Sandbox_MerchantId }}    
      Humm_Test_Sandbox_DeviceId: ${{ secrets.Test_Sandbox_DeviceId }}    
      Humm_Test_Sandbox_DeviceRegistrationKey: ${{ secrets.Test_Sandbox_DeviceRegistrationKey }}    
      Humm_Test_Sandbox_NewDeviceId: ${{ secrets.Test_Sandbox_NewDeviceId }}
      Coveralls_Token: ${{ secrets.Coveralls_Token }}   

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET Core 2.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    - name: Install dependencies  
      run: dotnet restore src\Yort.Humm.InStore.sln
    - name: Build with dotnet (src\Yort.Humm.InStore.sln)
      run: dotnet build src\Yort.Humm.InStore.sln --configuration Release --nologo
    - name: Run Tests
      run: dotnet test src\Yort.Humm.InStore.sln --verbosity normal --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura /p:CoverletOutput="Tests/TestResults/"
    - name: Install Report Generator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    - name: Generate Code Coverage Report
      run: reportgenerator "-reports:Tests\TestResults\**\coverage.cobertura.xml" "-targetdir:Tests\TestResults\Reports" --reporttypes:"Cobertura;Xml;Html" 
    - name: Install Coveralls Upload
      run: dotnet tool install -g coveralls.net --version 1.0.0
    - name: Upload coverage to Coveralls.IO
      run: csmacnz.Coveralls --reportgenerator -i "Tests\TestResults\Reports" --repoTokenVariable Coveralls_Token --commitId $Env:GITHUB_SHA --commitBranch $Env:GITHUB_REF --commitAuthor $Env:GITHUB_ACTOR --jobId $Env:GITHUB_RUN_ID
      
  pack:
    runs-on: windows-latest
    needs: build
    env:
      VERSION: ""
    if: github.event_name == 'push'
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Set version
      run: echo "::set-env name=VERSION::$(git describe --tags --dirty)"
    - name: Echo Version
      run: echo "$Env:VERSION"      
    - name: Build with dotnet (src\Yort.Humm.InStore.sln)
      run: dotnet build src\Yort.Humm.InStore.sln --configuration Release --nologo
    - name: Pack
      run: dotnet pack src\Yort.Humm.InStore.sln --output ./artifacts --configuration Release -p:PackageVersion=$Env:VERSION --include-source --nologo
    - uses: actions/upload-artifact@v1
      with:
        name: artifacts
        path: ./artifacts

  publish:
    runs-on: windows-latest
    needs: pack
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps: 
    - uses: actions/download-artifact@v1
      with:
        name: artifacts
        path: ./artifacts
    - name: Publish packages
      run: dotnet nuget push ./artifacts/**.nupkg --source nuget.org --api-key ${{secrets.NUGET_TOKEN}}
