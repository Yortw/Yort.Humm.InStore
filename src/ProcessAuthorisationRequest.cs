using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text;
using Ladon;
using Newtonsoft.Json;
using Yort.Humm.InStore.Infrastructure;

namespace Yort.Humm.InStore
{
	/// <summary>
	/// Represents a request to generate a payment plan/contract for the specified amount using the provided pre-approval code generated by a customer's device.
	/// </summary>
	/// <seealso cref="Yort.Humm.InStore.Infrastructure.RequestBase" />
	/// <seealso cref="ProcessSalesAdjustmentResponse"/>
	/// <seealso cref="HummClient.ProcessAuthorisationAsync(ProcessAuthorisationRequest)"/>
	public sealed class ProcessAuthorisationRequest : RequestBase
	{
		/// <summary>
		/// Required. Gets or sets the unique client transaction reference.
		/// </summary>
		/// <value>
		/// The unique client transaction reference.
		/// </value>
		/// <remarks>
		/// <para>This value should be unique and re-used on repeat calls for the same payment (in case of network/timeout errors etc) to ensure idempotency (and avoid duplicate procesing).</para>
		/// <para>If the value used here a temporary value not associated with the invoice/receipt/transaction document generated by the POS, a subsequent <see cref="SendReceiptRequest"/> can be made to update the created payment plan/contract with the final POS transaction reference.</para>
		/// <para>If the <see cref="BuyerConfirms"/> property is true then a 'big things' flow may occur which could take extra processing time. In this case one or more responses with a status of <see cref="RequestStates.Pending"/> may be received 
		/// and require the request to be resent at a specified interval. The application code can choose to handle this itself, or set the <see cref="AutoHandlePendingResponse"/> property to true. In that case the 
		/// library will automatically take care of handling the pending response, waiting the specified interval, an retrying the request until a final status is arrived at. The <see cref="HummClient.PendingAuthorisation"/>
		/// can be used in this flow for logging and updating the POS UI to keep the operator informed of progress. The event is not used if <see cref="AutoHandlePendingResponse"/> is false (or a pending status response is not received).
		/// <para>Maximum length of 64 characters.</para>
		/// </para>
		/// </remarks>
		[JsonProperty("x_pos_transaction_ref")]
		public string? ClientTransactionReference { get; set; }
		/// <summary>
		/// Required. Gets or sets the preapproval code generated by the customer's device. Normally scanned as a barcode, or entered via keyboard if neccesary.
		/// </summary>
		/// <remarks>
		/// <para>Expected length is between 6 and 10 digits, but this is not validated as per the Humm documentation, in order to allow for future changes.</para>
		/// </remarks>
		/// <value>
		/// A string containing the preapproval code.
		/// </value>
		[JsonProperty("x_pre_approval_code")]
		public string? PreapprovalCode { get; set; }
		/// <summary>
		/// Required. Gets or sets the dollvar value the customer wants to pay via Humm.
		/// </summary>
		/// <value>
		/// The finance amount as a dollar value in decimal format.
		/// </value>
		/// <remarks>
		/// <para>Although the Humm API requires this value to be sent as a number of cents, this library uses a dollar value and will perform the conversion to cents for you.
		/// For example, to send $119.50 set this value to 119.5.</para>
		/// </remarks>
		[JsonProperty("x_finance_amount")]
		public decimal FinanceAmount { get; set; }
		/// <summary>
		/// Required. Gets or sets the total purchase amount (including any value paid via Humm).
		/// </summary>
		/// <value>
		/// The full purchase amount.
		/// </value>
		/// <remarks>
		/// <para>Although the Humm API requires this value to be sent as a number of cents, this library uses a dollar value and will perform the conversion to cents for you.
		/// For example, to send $500 set this value to 500.</para>
		/// </remarks>
		[JsonProperty("x_purchase_amount")]
		public decimal PurchaseAmount { get; set; }

		/// <summary>
		/// Optional (may be null). Gets or sets details about what was purchased.
		/// </summary>
		/// <value>
		/// The purchase items.
		/// </value>
		/// <remarks>
		/// <para>This detail may appear on both the seller and customer's portal when looking at the transaction, providing greater detail about the purchase in that context.</para>
		/// </remarks>
		/// <seealso cref="PurchaseItemsCollection"/>
		[JsonProperty("purchase_items")]
#pragma warning disable CA2227 // Collection properties should be read only
		public PurchaseItemsCollection? PurchaseItems { get; set; }
#pragma warning restore CA2227 // Collection properties should be read only

		/// <summary>
		/// Gets or sets a value indicating whether or not the 'big things' flow is supported.
		/// </summary>
		/// <value>True to indicate the calling system supports and wants to enable the 'big things' flow for this transaction.</value>
		/// <remarks>
		/// <para>The 'big things' flow occurs when making purchases over a certain dollar limit, determined by Humm, which may require additional 
		/// credit checks, confirmaton by the customer and so on. In this case the calling system must be prepared to handle pending responses appropriately 
		/// and potentially wait longer to receive an outcome. The default value is false to indicate this is not supported, set to true to indicate it is.</para>
		/// </remarks>
		[JsonProperty("buyer_confirms")]
		public bool BuyerConfirms { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether the <see cref="HummClient.ProcessAuthorisationAsync(ProcessAuthorisationRequest)"/> automatically handles retries pending status responses.
		/// </summary>
		/// <value>True to have the <see cref="HummClient"/> instance handle pending status responses itself, or false to have the calling code handle them.</value>
		/// <remarks>
		/// <para>A pending status will only be received if the <see cref="BuyerConfirms"/> property is true and Humm needs additional time to process the request. In that case, 
		/// if <see cref="AutoHandlePendingResponse"/> is true the <see cref="HummClient"/> instance will raise the <see cref="HummClient.PendingAuthorisation"/> event to advise the 
		/// caller additional time is needed, then wait for the interval specified in the Humm response before retrying the request. This logic will be repeated until Humm returns a final response
		/// or an error occurs.
		/// </para>
		/// <para>If <see cref="AutoHandlePendingResponse"/> is false and a pending status response is received, it is up to the calling user code to take the appropriate actions.</para>
		/// </remarks>
		[JsonIgnore()]
		public bool AutoHandlePendingResponse { get; set; }

		/// <summary>
		/// Validates this request.
		/// </summary>
		/// <remarks>
		/// <para>
		/// Ensures that <see cref="ClientTransactionReference" /> and <see cref="PreapprovalCode" /> are not null, empty string or only whitespace.
		/// Also ensure no property is larger than it's maximum allowed length (see individual property notes for details).
		/// Also ensures all base properties are valid, see <see cref="RequestBase.Validate"/>.
		/// </para>
		/// <para>Does not validate the pre-approval code length or finance amounts, as rules for these are likely to vary over time. It is better to let the API respond with an 
		/// error result than pre-validate these values.</para>
		/// </remarks>
		public override void Validate()
		{
			ClientTransactionReference.GuardNullOrWhiteSpace("request", nameof(ClientTransactionReference));
			ClientTransactionReference.GuardLength("request", nameof(ClientTransactionReference), 64);

			PreapprovalCode.GuardNullOrWhiteSpace("request", nameof(PreapprovalCode));

			base.Validate();
		}
	}

	/// <summary>
	/// A collection representing a list of purchased items, used to provide extra details about a Humm transaction.
	/// </summary>
	/// <remarks>
	/// <para>Each item in the collection is a string providing a simple description of the item purchased.</para>
	/// </remarks>
	/// <seealso cref="System.Collections.Generic.List{T}" />
	[ExcludeFromCodeCoverage]
	public class PurchaseItemsCollection : List<string>
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="PurchaseItemsCollection"/> class.
		/// </summary>
		public PurchaseItemsCollection() : base() { }
		/// <summary>
		/// Initializes a new instance of the <see cref="PurchaseItemsCollection"/> class.
		/// </summary>
		/// <param name="capacity">The number of elements that the new list can initially store.</param>
		public PurchaseItemsCollection(int capacity) : base(capacity) { }
		/// <summary>
		/// Initializes a new instance of the <see cref="PurchaseItemsCollection"/> class.
		/// </summary>
		/// <param name="items">A set of items to intialise the collection with.</param>
		public PurchaseItemsCollection(IEnumerable<string> items) : base(items) { }
	}
}